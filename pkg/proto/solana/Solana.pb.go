// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: Solana.proto

package solana

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Value     uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Transfer) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorPubkey string `protobuf:"bytes,1,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	Value           uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{1}
}

func (x *Stake) GetValidatorPubkey() string {
	if x != nil {
		return x.ValidatorPubkey
	}
	return ""
}

func (x *Stake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DeactivateStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorPubkey string `protobuf:"bytes,1,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
}

func (x *DeactivateStake) Reset() {
	*x = DeactivateStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateStake) ProtoMessage() {}

func (x *DeactivateStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateStake.ProtoReflect.Descriptor instead.
func (*DeactivateStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{2}
}

func (x *DeactivateStake) GetValidatorPubkey() string {
	if x != nil {
		return x.ValidatorPubkey
	}
	return ""
}

type WithdrawStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorPubkey string `protobuf:"bytes,1,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	Value           uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WithdrawStake) Reset() {
	*x = WithdrawStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStake) ProtoMessage() {}

func (x *WithdrawStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStake.ProtoReflect.Descriptor instead.
func (*WithdrawStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{3}
}

func (x *WithdrawStake) GetValidatorPubkey() string {
	if x != nil {
		return x.ValidatorPubkey
	}
	return ""
}

func (x *WithdrawStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Create a token account under a main account for a token type
type CreateTokenAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	MainAddress      string `protobuf:"bytes,1,opt,name=main_address,json=mainAddress,proto3" json:"main_address,omitempty"`
	TokenMintAddress string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	TokenAddress     string `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
}

func (x *CreateTokenAccount) Reset() {
	*x = CreateTokenAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenAccount) ProtoMessage() {}

func (x *CreateTokenAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenAccount.ProtoReflect.Descriptor instead.
func (*CreateTokenAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTokenAccount) GetMainAddress() string {
	if x != nil {
		return x.MainAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

// Transfer tokens
type TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenMintAddress      string `protobuf:"bytes,1,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	SenderTokenAddress    string `protobuf:"bytes,2,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	Amount                uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals              uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"` // Note: 8-bit value
}

func (x *TokenTransfer) Reset() {
	*x = TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransfer) ProtoMessage() {}

func (x *TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransfer.ProtoReflect.Descriptor instead.
func (*TokenTransfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{5}
}

func (x *TokenTransfer) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *TokenTransfer) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransfer) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

// CreateTokenAccount and TokenTransfer combined
type CreateAndTransferToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	RecipientMainAddress string `protobuf:"bytes,1,opt,name=recipient_main_address,json=recipientMainAddress,proto3" json:"recipient_main_address,omitempty"`
	TokenMintAddress     string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Token address for the recipient, will be created first
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	SenderTokenAddress    string `protobuf:"bytes,4,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	Amount                uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals              uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"` // Note: 8-bit value
}

func (x *CreateAndTransferToken) Reset() {
	*x = CreateAndTransferToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndTransferToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndTransferToken) ProtoMessage() {}

func (x *CreateAndTransferToken) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndTransferToken.ProtoReflect.Descriptor instead.
func (*CreateAndTransferToken) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAndTransferToken) GetRecipientMainAddress() string {
	if x != nil {
		return x.RecipientMainAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateAndTransferToken) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey      []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	RecentBlockhash string `protobuf:"bytes,2,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// Types that are assignable to TransactionType:
	//	*SigningInput_TransferTransaction
	//	*SigningInput_StakeTransaction
	//	*SigningInput_DeactivateStakeTransaction
	//	*SigningInput_WithdrawTransaction
	//	*SigningInput_CreateTokenAccountTransaction
	//	*SigningInput_TokenTransferTransaction
	//	*SigningInput_CreateAndTransferTokenTransaction
	TransactionType isSigningInput_TransactionType `protobuf_oneof:"transaction_type"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{7}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (m *SigningInput) GetTransactionType() isSigningInput_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (x *SigningInput) GetTransferTransaction() *Transfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TransferTransaction); ok {
		return x.TransferTransaction
	}
	return nil
}

func (x *SigningInput) GetStakeTransaction() *Stake {
	if x, ok := x.GetTransactionType().(*SigningInput_StakeTransaction); ok {
		return x.StakeTransaction
	}
	return nil
}

func (x *SigningInput) GetDeactivateStakeTransaction() *DeactivateStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DeactivateStakeTransaction); ok {
		return x.DeactivateStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetWithdrawTransaction() *WithdrawStake {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawTransaction); ok {
		return x.WithdrawTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateTokenAccountTransaction() *CreateTokenAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateTokenAccountTransaction); ok {
		return x.CreateTokenAccountTransaction
	}
	return nil
}

func (x *SigningInput) GetTokenTransferTransaction() *TokenTransfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TokenTransferTransaction); ok {
		return x.TokenTransferTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateAndTransferTokenTransaction() *CreateAndTransferToken {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateAndTransferTokenTransaction); ok {
		return x.CreateAndTransferTokenTransaction
	}
	return nil
}

type isSigningInput_TransactionType interface {
	isSigningInput_TransactionType()
}

type SigningInput_TransferTransaction struct {
	TransferTransaction *Transfer `protobuf:"bytes,3,opt,name=transfer_transaction,json=transferTransaction,proto3,oneof"`
}

type SigningInput_StakeTransaction struct {
	StakeTransaction *Stake `protobuf:"bytes,4,opt,name=stake_transaction,json=stakeTransaction,proto3,oneof"`
}

type SigningInput_DeactivateStakeTransaction struct {
	DeactivateStakeTransaction *DeactivateStake `protobuf:"bytes,5,opt,name=deactivate_stake_transaction,json=deactivateStakeTransaction,proto3,oneof"`
}

type SigningInput_WithdrawTransaction struct {
	WithdrawTransaction *WithdrawStake `protobuf:"bytes,6,opt,name=withdraw_transaction,json=withdrawTransaction,proto3,oneof"`
}

type SigningInput_CreateTokenAccountTransaction struct {
	CreateTokenAccountTransaction *CreateTokenAccount `protobuf:"bytes,7,opt,name=create_token_account_transaction,json=createTokenAccountTransaction,proto3,oneof"`
}

type SigningInput_TokenTransferTransaction struct {
	TokenTransferTransaction *TokenTransfer `protobuf:"bytes,8,opt,name=token_transfer_transaction,json=tokenTransferTransaction,proto3,oneof"`
}

type SigningInput_CreateAndTransferTokenTransaction struct {
	CreateAndTransferTokenTransaction *CreateAndTransferToken `protobuf:"bytes,9,opt,name=create_and_transfer_token_transaction,json=createAndTransferTokenTransaction,proto3,oneof"`
}

func (*SigningInput_TransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_StakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DeactivateStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateTokenAccountTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_TokenTransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateAndTransferTokenTransaction) isSigningInput_TransactionType() {}

// Transaction signing output.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{8}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

var File_Solana_proto protoreflect.FileDescriptor

var file_Solana_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3e, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x48, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0f, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x22, 0x8d, 0x06, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4e,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x57, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1c, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6e, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7b, 0x0a, 0x25, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x29, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x3b, 0x0a, 0x15,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x22, 0x61, 0x6c, 0x66, 0x61, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_Solana_proto_rawDescOnce sync.Once
	file_Solana_proto_rawDescData = file_Solana_proto_rawDesc
)

func file_Solana_proto_rawDescGZIP() []byte {
	file_Solana_proto_rawDescOnce.Do(func() {
		file_Solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_Solana_proto_rawDescData)
	})
	return file_Solana_proto_rawDescData
}

var file_Solana_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_Solana_proto_goTypes = []interface{}{
	(*Transfer)(nil),               // 0: TW.Solana.Proto.Transfer
	(*Stake)(nil),                  // 1: TW.Solana.Proto.Stake
	(*DeactivateStake)(nil),        // 2: TW.Solana.Proto.DeactivateStake
	(*WithdrawStake)(nil),          // 3: TW.Solana.Proto.WithdrawStake
	(*CreateTokenAccount)(nil),     // 4: TW.Solana.Proto.CreateTokenAccount
	(*TokenTransfer)(nil),          // 5: TW.Solana.Proto.TokenTransfer
	(*CreateAndTransferToken)(nil), // 6: TW.Solana.Proto.CreateAndTransferToken
	(*SigningInput)(nil),           // 7: TW.Solana.Proto.SigningInput
	(*SigningOutput)(nil),          // 8: TW.Solana.Proto.SigningOutput
}
var file_Solana_proto_depIdxs = []int32{
	0, // 0: TW.Solana.Proto.SigningInput.transfer_transaction:type_name -> TW.Solana.Proto.Transfer
	1, // 1: TW.Solana.Proto.SigningInput.stake_transaction:type_name -> TW.Solana.Proto.Stake
	2, // 2: TW.Solana.Proto.SigningInput.deactivate_stake_transaction:type_name -> TW.Solana.Proto.DeactivateStake
	3, // 3: TW.Solana.Proto.SigningInput.withdraw_transaction:type_name -> TW.Solana.Proto.WithdrawStake
	4, // 4: TW.Solana.Proto.SigningInput.create_token_account_transaction:type_name -> TW.Solana.Proto.CreateTokenAccount
	5, // 5: TW.Solana.Proto.SigningInput.token_transfer_transaction:type_name -> TW.Solana.Proto.TokenTransfer
	6, // 6: TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction:type_name -> TW.Solana.Proto.CreateAndTransferToken
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_Solana_proto_init() }
func file_Solana_proto_init() {
	if File_Solana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndTransferToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Solana_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SigningInput_TransferTransaction)(nil),
		(*SigningInput_StakeTransaction)(nil),
		(*SigningInput_DeactivateStakeTransaction)(nil),
		(*SigningInput_WithdrawTransaction)(nil),
		(*SigningInput_CreateTokenAccountTransaction)(nil),
		(*SigningInput_TokenTransferTransaction)(nil),
		(*SigningInput_CreateAndTransferTokenTransaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Solana_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Solana_proto_goTypes,
		DependencyIndexes: file_Solana_proto_depIdxs,
		MessageInfos:      file_Solana_proto_msgTypes,
	}.Build()
	File_Solana_proto = out.File
	file_Solana_proto_rawDesc = nil
	file_Solana_proto_goTypes = nil
	file_Solana_proto_depIdxs = nil
}
